/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as TestRotueImport } from './routes/testRotue'
import { Route as PrivateImport } from './routes/_private'
import { Route as IndexImport } from './routes/index'
import { Route as PrivateTransactionsImport } from './routes/_private/transactions'
import { Route as PrivateSettingsImport } from './routes/_private/settings'
import { Route as PrivateOptionsImport } from './routes/_private/options'
import { Route as PrivateDashboardImport } from './routes/_private/dashboard'
import { Route as authAuthImport } from './routes/(auth)/auth'

// Create/Update Routes

const TestRotueRoute = TestRotueImport.update({
  id: '/testRotue',
  path: '/testRotue',
  getParentRoute: () => rootRoute,
} as any)

const PrivateRoute = PrivateImport.update({
  id: '/_private',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const PrivateTransactionsRoute = PrivateTransactionsImport.update({
  id: '/transactions',
  path: '/transactions',
  getParentRoute: () => PrivateRoute,
} as any)

const PrivateSettingsRoute = PrivateSettingsImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => PrivateRoute,
} as any)

const PrivateOptionsRoute = PrivateOptionsImport.update({
  id: '/options',
  path: '/options',
  getParentRoute: () => PrivateRoute,
} as any)

const PrivateDashboardRoute = PrivateDashboardImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => PrivateRoute,
} as any)

const authAuthRoute = authAuthImport.update({
  id: '/(auth)/auth',
  path: '/auth',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_private': {
      id: '/_private'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PrivateImport
      parentRoute: typeof rootRoute
    }
    '/testRotue': {
      id: '/testRotue'
      path: '/testRotue'
      fullPath: '/testRotue'
      preLoaderRoute: typeof TestRotueImport
      parentRoute: typeof rootRoute
    }
    '/(auth)/auth': {
      id: '/(auth)/auth'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof authAuthImport
      parentRoute: typeof rootRoute
    }
    '/_private/dashboard': {
      id: '/_private/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof PrivateDashboardImport
      parentRoute: typeof PrivateImport
    }
    '/_private/options': {
      id: '/_private/options'
      path: '/options'
      fullPath: '/options'
      preLoaderRoute: typeof PrivateOptionsImport
      parentRoute: typeof PrivateImport
    }
    '/_private/settings': {
      id: '/_private/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof PrivateSettingsImport
      parentRoute: typeof PrivateImport
    }
    '/_private/transactions': {
      id: '/_private/transactions'
      path: '/transactions'
      fullPath: '/transactions'
      preLoaderRoute: typeof PrivateTransactionsImport
      parentRoute: typeof PrivateImport
    }
  }
}

// Create and export the route tree

interface PrivateRouteChildren {
  PrivateDashboardRoute: typeof PrivateDashboardRoute
  PrivateOptionsRoute: typeof PrivateOptionsRoute
  PrivateSettingsRoute: typeof PrivateSettingsRoute
  PrivateTransactionsRoute: typeof PrivateTransactionsRoute
}

const PrivateRouteChildren: PrivateRouteChildren = {
  PrivateDashboardRoute: PrivateDashboardRoute,
  PrivateOptionsRoute: PrivateOptionsRoute,
  PrivateSettingsRoute: PrivateSettingsRoute,
  PrivateTransactionsRoute: PrivateTransactionsRoute,
}

const PrivateRouteWithChildren =
  PrivateRoute._addFileChildren(PrivateRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof PrivateRouteWithChildren
  '/testRotue': typeof TestRotueRoute
  '/auth': typeof authAuthRoute
  '/dashboard': typeof PrivateDashboardRoute
  '/options': typeof PrivateOptionsRoute
  '/settings': typeof PrivateSettingsRoute
  '/transactions': typeof PrivateTransactionsRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof PrivateRouteWithChildren
  '/testRotue': typeof TestRotueRoute
  '/auth': typeof authAuthRoute
  '/dashboard': typeof PrivateDashboardRoute
  '/options': typeof PrivateOptionsRoute
  '/settings': typeof PrivateSettingsRoute
  '/transactions': typeof PrivateTransactionsRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_private': typeof PrivateRouteWithChildren
  '/testRotue': typeof TestRotueRoute
  '/(auth)/auth': typeof authAuthRoute
  '/_private/dashboard': typeof PrivateDashboardRoute
  '/_private/options': typeof PrivateOptionsRoute
  '/_private/settings': typeof PrivateSettingsRoute
  '/_private/transactions': typeof PrivateTransactionsRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | ''
    | '/testRotue'
    | '/auth'
    | '/dashboard'
    | '/options'
    | '/settings'
    | '/transactions'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | ''
    | '/testRotue'
    | '/auth'
    | '/dashboard'
    | '/options'
    | '/settings'
    | '/transactions'
  id:
    | '__root__'
    | '/'
    | '/_private'
    | '/testRotue'
    | '/(auth)/auth'
    | '/_private/dashboard'
    | '/_private/options'
    | '/_private/settings'
    | '/_private/transactions'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  PrivateRoute: typeof PrivateRouteWithChildren
  TestRotueRoute: typeof TestRotueRoute
  authAuthRoute: typeof authAuthRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  PrivateRoute: PrivateRouteWithChildren,
  TestRotueRoute: TestRotueRoute,
  authAuthRoute: authAuthRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_private",
        "/testRotue",
        "/(auth)/auth"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_private": {
      "filePath": "_private.tsx",
      "children": [
        "/_private/dashboard",
        "/_private/options",
        "/_private/settings",
        "/_private/transactions"
      ]
    },
    "/testRotue": {
      "filePath": "testRotue.tsx"
    },
    "/(auth)/auth": {
      "filePath": "(auth)/auth.tsx"
    },
    "/_private/dashboard": {
      "filePath": "_private/dashboard.tsx",
      "parent": "/_private"
    },
    "/_private/options": {
      "filePath": "_private/options.tsx",
      "parent": "/_private"
    },
    "/_private/settings": {
      "filePath": "_private/settings.tsx",
      "parent": "/_private"
    },
    "/_private/transactions": {
      "filePath": "_private/transactions.tsx",
      "parent": "/_private"
    }
  }
}
ROUTE_MANIFEST_END */
